---
version: 2.1

orbs:
  win: circleci/windows@2.2.0

executors:
  linux_executor:
    docker:
      - image: adoptopenjdk/openjdk11:x86_64-debian-jdk-11.0.8_10
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
    resource_class: medium
    working_directory: ~/project
  mac_os_executor:
    macos:
      xcode: "12.5.1"
    resource_class: medium
    working_directory: ~/jblst
    environment:
      HOMEBREW_NO_AUTO_UPDATE: true

jobs:
  x86-64-linux-build:
    executor: linux_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout
      - run:
          name: "Build Linux x86 Library"
          command: ./build-linux-x86.sh
      - run:
          name: "Build Linux aarch64 Library"
          command: ./build-linux-aarch64.sh
      - run:
          name: "Check Library Works"
          command: ./assemble.sh
      - persist_to_workspace:
          root: ./
          paths:
          - ./build/artifacts/
      - store_artifacts:
            name: Store Test Results
            path: build/reports
            destination: test_results

  mac-os-build:
    executor: mac_os_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo "Installing openjdk 11 for test execution"
            brew install openjdk@11
            sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

            echo "Installing build tools"
            brew install autoconf automake libtool cmake
      - run:
          name: "Build Mac x86 Library"
          command: ./build-osx-x86.sh
      - run:
          name: "Build Mac aarch64 Library"
          command: ./build-osx-aarch64.sh
      - run:
          name: "Check Library Works"
          command: ./assemble.sh
      - persist_to_workspace:
          root: ./
          paths:
            - ./build/artifacts/
      - run:
          command: |
            find ./build/ -type f -name "CMake*.log" -exec tar -rvf build/cmakeLogs.tar {} \;
          when: on_fail
      - store_artifacts:
          path: ./build/cmakeLogs.tar
          destination: cmakeLogs

  assemble:
    executor: linux_executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build Jar and Test
          command: ./assemble.sh

      - persist_to_workspace:
          root: .
          paths:
            - ./
      - store_artifacts:
          name: Store Jar
          path: build/libs

  publish:
    executor: linux_executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel publish

workflows:
  default:
    jobs:
      - x86-64-linux-build:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
          context:
            - dockerhub-quorumengineering-ro
      - mac-os-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - assemble:
          requires:
            - x86-64-linux-build
            - mac-os-build
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - publish:
          requires:
            - assemble
          filters:
            branches:
              only:
                - main
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          context:
            - cloudsmith-protocols
            - dockerhub-quorumengineering-ro
